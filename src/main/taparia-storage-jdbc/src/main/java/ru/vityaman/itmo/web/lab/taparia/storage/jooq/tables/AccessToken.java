/*
 * This file is generated by jOOQ.
 */
package ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.YearToSecond;

import ru.vityaman.itmo.web.lab.taparia.storage.jooq.Keys;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.Taparia;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records.AccessTokenRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessToken extends TableImpl<AccessTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taparia.access_token</code>
     */
    public static final AccessToken ACCESS_TOKEN = new AccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessTokenRecord> getRecordType() {
        return AccessTokenRecord.class;
    }

    /**
     * The column <code>taparia.access_token.user_id</code>.
     */
    public final TableField<AccessTokenRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taparia.access_token.token</code>.
     */
    public final TableField<AccessTokenRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>taparia.access_token.created_at</code>.
     */
    public final TableField<AccessTokenRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>taparia.access_token.ttl</code>.
     */
    public final TableField<AccessTokenRecord, YearToSecond> TTL = createField(DSL.name("ttl"), SQLDataType.INTERVAL.nullable(false), this, "");

    private AccessToken(Name alias, Table<AccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessToken(Name alias, Table<AccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taparia.access_token</code> table reference
     */
    public AccessToken(String alias) {
        this(DSL.name(alias), ACCESS_TOKEN);
    }

    /**
     * Create an aliased <code>taparia.access_token</code> table reference
     */
    public AccessToken(Name alias) {
        this(alias, ACCESS_TOKEN);
    }

    /**
     * Create a <code>taparia.access_token</code> table reference
     */
    public AccessToken() {
        this(DSL.name("access_token"), null);
    }

    public <O extends Record> AccessToken(Table<O> child, ForeignKey<O, AccessTokenRecord> key) {
        super(child, key, ACCESS_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taparia.TAPARIA;
    }

    @Override
    public UniqueKey<AccessTokenRecord> getPrimaryKey() {
        return Keys.ACCESS_TOKEN_PKEY;
    }

    @Override
    public List<ForeignKey<AccessTokenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCESS_TOKEN__FK_USER_ACCOUNT);
    }

    private transient UserAccount _userAccount;

    /**
     * Get the implicit join path to the <code>taparia.user_account</code>
     * table.
     */
    public UserAccount userAccount() {
        if (_userAccount == null)
            _userAccount = new UserAccount(this, Keys.ACCESS_TOKEN__FK_USER_ACCOUNT);

        return _userAccount;
    }

    @Override
    public AccessToken as(String alias) {
        return new AccessToken(DSL.name(alias), this);
    }

    @Override
    public AccessToken as(Name alias) {
        return new AccessToken(alias, this);
    }

    @Override
    public AccessToken as(Table<?> alias) {
        return new AccessToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessToken rename(String name) {
        return new AccessToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessToken rename(Name name) {
        return new AccessToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessToken rename(Table<?> name) {
        return new AccessToken(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, YearToSecond> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super LocalDateTime, ? super YearToSecond, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super LocalDateTime, ? super YearToSecond, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
