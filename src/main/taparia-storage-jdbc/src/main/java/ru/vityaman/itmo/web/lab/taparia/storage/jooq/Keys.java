/*
 * This file is generated by jOOQ.
 */
package ru.vityaman.itmo.web.lab.taparia.storage.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.AccessToken;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.PermissionUserPicture;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.Picture;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.TapResult;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.UserAccount;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records.AccessTokenRecord;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records.PermissionUserPictureRecord;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records.PictureRecord;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records.TapResultRecord;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records.UserAccountRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * taparia.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccessTokenRecord> ACCESS_TOKEN_PKEY = Internal.createUniqueKey(AccessToken.ACCESS_TOKEN, DSL.name("access_token_pkey"), new TableField[] { AccessToken.ACCESS_TOKEN.USER_ID }, true);
    public static final UniqueKey<PermissionUserPictureRecord> PERMISSION_USER_PICTURE_PKEY = Internal.createUniqueKey(PermissionUserPicture.PERMISSION_USER_PICTURE, DSL.name("permission_user_picture_pkey"), new TableField[] { PermissionUserPicture.PERMISSION_USER_PICTURE.OWNER_ID, PermissionUserPicture.PERMISSION_USER_PICTURE.PICTURE_ID }, true);
    public static final UniqueKey<PictureRecord> PICTURE_PKEY = Internal.createUniqueKey(Picture.PICTURE, DSL.name("picture_pkey"), new TableField[] { Picture.PICTURE.ID }, true);
    public static final UniqueKey<PictureRecord> UQ_OWNER_ID_AND_NAME = Internal.createUniqueKey(Picture.PICTURE, DSL.name("uq_owner_id_and_name"), new TableField[] { Picture.PICTURE.OWNER_ID, Picture.PICTURE.NAME }, true);
    public static final UniqueKey<TapResultRecord> TAP_RESULT_PKEY = Internal.createUniqueKey(TapResult.TAP_RESULT, DSL.name("tap_result_pkey"), new TableField[] { TapResult.TAP_RESULT.ID }, true);
    public static final UniqueKey<UserAccountRecord> USER_ACCOUNT_LOGIN_KEY = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("user_account_login_key"), new TableField[] { UserAccount.USER_ACCOUNT.LOGIN }, true);
    public static final UniqueKey<UserAccountRecord> USER_ACCOUNT_PKEY = Internal.createUniqueKey(UserAccount.USER_ACCOUNT, DSL.name("user_account_pkey"), new TableField[] { UserAccount.USER_ACCOUNT.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccessTokenRecord, UserAccountRecord> ACCESS_TOKEN__FK_USER_ACCOUNT = Internal.createForeignKey(AccessToken.ACCESS_TOKEN, DSL.name("fk_user_account"), new TableField[] { AccessToken.ACCESS_TOKEN.USER_ID }, Keys.USER_ACCOUNT_PKEY, new TableField[] { UserAccount.USER_ACCOUNT.ID }, true);
    public static final ForeignKey<PermissionUserPictureRecord, PictureRecord> PERMISSION_USER_PICTURE__FK_PICTURE = Internal.createForeignKey(PermissionUserPicture.PERMISSION_USER_PICTURE, DSL.name("fk_picture"), new TableField[] { PermissionUserPicture.PERMISSION_USER_PICTURE.PICTURE_ID }, Keys.PICTURE_PKEY, new TableField[] { Picture.PICTURE.ID }, true);
    public static final ForeignKey<PermissionUserPictureRecord, UserAccountRecord> PERMISSION_USER_PICTURE__FK_USER_ACCOUNT = Internal.createForeignKey(PermissionUserPicture.PERMISSION_USER_PICTURE, DSL.name("fk_user_account"), new TableField[] { PermissionUserPicture.PERMISSION_USER_PICTURE.OWNER_ID }, Keys.USER_ACCOUNT_PKEY, new TableField[] { UserAccount.USER_ACCOUNT.ID }, true);
    public static final ForeignKey<PictureRecord, UserAccountRecord> PICTURE__FK_USER_ACCOUNT = Internal.createForeignKey(Picture.PICTURE, DSL.name("fk_user_account"), new TableField[] { Picture.PICTURE.OWNER_ID }, Keys.USER_ACCOUNT_PKEY, new TableField[] { UserAccount.USER_ACCOUNT.ID }, true);
    public static final ForeignKey<TapResultRecord, PictureRecord> TAP_RESULT__FK_PICTURE = Internal.createForeignKey(TapResult.TAP_RESULT, DSL.name("fk_picture"), new TableField[] { TapResult.TAP_RESULT.PICTURE_ID }, Keys.PICTURE_PKEY, new TableField[] { Picture.PICTURE.ID }, true);
    public static final ForeignKey<TapResultRecord, UserAccountRecord> TAP_RESULT__FK_USER_ACCOUNT = Internal.createForeignKey(TapResult.TAP_RESULT, DSL.name("fk_user_account"), new TableField[] { TapResult.TAP_RESULT.OWNER_ID }, Keys.USER_ACCOUNT_PKEY, new TableField[] { UserAccount.USER_ACCOUNT.ID }, true);
}
