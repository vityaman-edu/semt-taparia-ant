/*
 * This file is generated by jOOQ.
 */
package ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.vityaman.itmo.web.lab.taparia.storage.jooq.enums.PermissionUserPictureType;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.PermissionUserPicture;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissionUserPictureRecord extends UpdatableRecordImpl<PermissionUserPictureRecord> implements Record3<Long, PermissionUserPictureType, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>taparia.permission_user_picture.owner_id</code>.
     */
    public void setOwnerId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>taparia.permission_user_picture.owner_id</code>.
     */
    public Long getOwnerId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>taparia.permission_user_picture.type</code>.
     */
    public void setType(PermissionUserPictureType value) {
        set(1, value);
    }

    /**
     * Getter for <code>taparia.permission_user_picture.type</code>.
     */
    public PermissionUserPictureType getType() {
        return (PermissionUserPictureType) get(1);
    }

    /**
     * Setter for <code>taparia.permission_user_picture.picture_id</code>.
     */
    public void setPictureId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>taparia.permission_user_picture.picture_id</code>.
     */
    public Long getPictureId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, PermissionUserPictureType, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, PermissionUserPictureType, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return PermissionUserPicture.PERMISSION_USER_PICTURE.OWNER_ID;
    }

    @Override
    public Field<PermissionUserPictureType> field2() {
        return PermissionUserPicture.PERMISSION_USER_PICTURE.TYPE;
    }

    @Override
    public Field<Long> field3() {
        return PermissionUserPicture.PERMISSION_USER_PICTURE.PICTURE_ID;
    }

    @Override
    public Long component1() {
        return getOwnerId();
    }

    @Override
    public PermissionUserPictureType component2() {
        return getType();
    }

    @Override
    public Long component3() {
        return getPictureId();
    }

    @Override
    public Long value1() {
        return getOwnerId();
    }

    @Override
    public PermissionUserPictureType value2() {
        return getType();
    }

    @Override
    public Long value3() {
        return getPictureId();
    }

    @Override
    public PermissionUserPictureRecord value1(Long value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public PermissionUserPictureRecord value2(PermissionUserPictureType value) {
        setType(value);
        return this;
    }

    @Override
    public PermissionUserPictureRecord value3(Long value) {
        setPictureId(value);
        return this;
    }

    @Override
    public PermissionUserPictureRecord values(Long value1, PermissionUserPictureType value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PermissionUserPictureRecord
     */
    public PermissionUserPictureRecord() {
        super(PermissionUserPicture.PERMISSION_USER_PICTURE);
    }

    /**
     * Create a detached, initialised PermissionUserPictureRecord
     */
    public PermissionUserPictureRecord(Long ownerId, PermissionUserPictureType type, Long pictureId) {
        super(PermissionUserPicture.PERMISSION_USER_PICTURE);

        setOwnerId(ownerId);
        setType(type);
        setPictureId(pictureId);
    }
}
