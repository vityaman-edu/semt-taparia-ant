/*
 * This file is generated by jOOQ.
 */
package ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.vityaman.itmo.web.lab.taparia.storage.jooq.Keys;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.Taparia;
import ru.vityaman.itmo.web.lab.taparia.storage.jooq.tables.records.PictureRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Picture extends TableImpl<PictureRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>taparia.picture</code>
     */
    public static final Picture PICTURE = new Picture();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PictureRecord> getRecordType() {
        return PictureRecord.class;
    }

    /**
     * The column <code>taparia.picture.id</code>.
     */
    public final TableField<PictureRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval('taparia.seq_picture_id'::regclass)", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>taparia.picture.owner_id</code>.
     */
    public final TableField<PictureRecord, Long> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>taparia.picture.name</code>.
     */
    public final TableField<PictureRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>taparia.picture.data</code>.
     */
    public final TableField<PictureRecord, String> DATA = createField(DSL.name("data"), SQLDataType.CLOB.nullable(false), this, "");

    private Picture(Name alias, Table<PictureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Picture(Name alias, Table<PictureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>taparia.picture</code> table reference
     */
    public Picture(String alias) {
        this(DSL.name(alias), PICTURE);
    }

    /**
     * Create an aliased <code>taparia.picture</code> table reference
     */
    public Picture(Name alias) {
        this(alias, PICTURE);
    }

    /**
     * Create a <code>taparia.picture</code> table reference
     */
    public Picture() {
        this(DSL.name("picture"), null);
    }

    public <O extends Record> Picture(Table<O> child, ForeignKey<O, PictureRecord> key) {
        super(child, key, PICTURE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Taparia.TAPARIA;
    }

    @Override
    public UniqueKey<PictureRecord> getPrimaryKey() {
        return Keys.PICTURE_PKEY;
    }

    @Override
    public List<UniqueKey<PictureRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UQ_OWNER_ID_AND_NAME);
    }

    @Override
    public List<ForeignKey<PictureRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PICTURE__FK_USER_ACCOUNT);
    }

    private transient UserAccount _userAccount;

    /**
     * Get the implicit join path to the <code>taparia.user_account</code>
     * table.
     */
    public UserAccount userAccount() {
        if (_userAccount == null)
            _userAccount = new UserAccount(this, Keys.PICTURE__FK_USER_ACCOUNT);

        return _userAccount;
    }

    @Override
    public Picture as(String alias) {
        return new Picture(DSL.name(alias), this);
    }

    @Override
    public Picture as(Name alias) {
        return new Picture(alias, this);
    }

    @Override
    public Picture as(Table<?> alias) {
        return new Picture(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(String name) {
        return new Picture(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(Name name) {
        return new Picture(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Picture rename(Table<?> name) {
        return new Picture(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
